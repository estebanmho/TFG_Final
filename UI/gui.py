
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import os
import tkinter
from Depth.calibration_images import *
from Depth.stereo_calibration import *
from Prediction.PredictiveClass import *
import traceback
import logging


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r".\assets\frame0")


stereo_cam = False



def start_program():
    window.withdraw()
    try:
        execution = PredictiveClass(int(camera_one.get()))
        if stereo_cam:
            execution.include_depth(int(camera_two.get()))
        execution.main_function()
        tkinter.messagebox.showinfo("Instructions", "Press q to stop tracking.")
        window.destroy()
    except Exception as e:
        tkinter.messagebox.showinfo("Instructions", "Camera not detected or not compatible.")
        tkinter.messagebox.showinfo("Log", traceback.format_exc())
        window.deiconify()

def hide_camera_two():
    try:
        global stereo_cam
        global button_image_2
        if stereo_cam:
            stereo_cam = False
            camera_two.config(state="disabled")
            button_image_2 = PhotoImage(
                file=relative_to_assets("button_2.png"))
        else:
            stereo_cam = True
            camera_two.config(state="normal")
            button_image_2 = PhotoImage(
                file=relative_to_assets("pruebas.png"))
        button_2.config(image=button_image_2)

    except Exception as e:
        tkinter.messagebox.showinfo("Log", traceback.format_exc())
        window.deiconify()



def calibrate():
    try:
        window.withdraw()
        if stereo_cam == True:
            if int(camera_one.get()) == int(camera_two.get()):
                tkinter.messagebox.showinfo("Instructions", "Same camera selected.")
            else:
                var_cal = CalibrationImages(int(camera_one.get()), int(camera_two.get()))
                var_cal.start_calibration()
                stereo_calibrate()
                tkinter.messagebox.showinfo("Instructions", "The cameras has been calibrated.")
        else:
            tkinter.messagebox.showinfo("Instructions", "No second camera configurated.")
        window.deiconify()
    except Exception as e:
        tkinter.messagebox.showinfo("Log", traceback.format_exc())
        window.deiconify()


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
window.title("Hundsor")
window.geometry("960x768")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 768,
    width = 960,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    507.75,
    768.0,
    fill="#4529A7",
    outline="")

canvas.create_text(
    63.75,
    57.75,
    anchor="nw",
    text="Bienvenido a Hundsor",
    fill="#FFFFFF",
    font=("RobotoRoman ExtraBold", 37 * -1)
)

canvas.create_text(
    66.0,
    131.25,
    anchor="nw",
    text="Esta aplicación te permite controlar tu ordenador a través del\nuso de una o varias cámaras. Podrás llevar a cabo acciones\nque realizarías con un teclado o un ratón, a través de gestos.\nGracias a su entrenamiento a través de redes neuronales y\nmedición de la profundidad, el sistema resulta altamente\nefectivo, mejorando la experiencia de usuario para el control\ndel ordenador.",
    fill="#FFFFFF",
    font=("RobotoRoman Light", 15 * -1)
)

canvas.create_text(
    66.0,
    321.0,
    anchor="nw",
    text="Acciones y respuestas:",
    fill="#FFFFFF",
    font=("RobotoRoman Bold", 21 * -1)
)

canvas.create_text(
    571.5,
    131.25,
    anchor="nw",
    text="CONFIGURACIÓN DEL SISTEMA",
    fill="#4E29AE",
    font=("RobotoRoman Bold", 21 * -1)
)

image_image_1 = PhotoImage(
    file=relative_to_assets("scroll.png"))
image_1 = canvas.create_image(
    304.0,
    397.75,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("click_der.png"))
image_2 = canvas.create_image(
    85.0,
    585.25,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("click_izq.png"))
image_3 = canvas.create_image(
    85.0,
    491.5,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("cursor.png"))
image_4 = canvas.create_image(
    85.0,
    397.75,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("zoom_in.png"))
image_5 = canvas.create_image(
    304.0,
    585.25,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("zoom_out.png"))
image_6 = canvas.create_image(
    304.0,
    491.5,
    image=image_image_6
)

canvas.create_text(
    123.0,
    451.5,
    anchor="nw",
    text="\n\nClick izquierdo",
    fill="#FFFFFF",
    font=("RobotoRoman Light", 15 * -1)
)

canvas.create_text(
    123.0,
    366.0,
    anchor="nw",
    text="\nMover el cursor",
    fill="#FFFFFF",
    font=("RobotoRoman Light", 15 * -1)
)

canvas.create_text(
    123.0,
    533.25,
    anchor="nw",
    text="\n\nClick derecho",
    fill="#FFFFFF",
    font=("RobotoRoman Light", 15 * -1)
)

canvas.create_text(
    343.5,
    366.0,
    anchor="nw",
    text="\nScroll",
    fill="#FFFFFF",
    font=("RobotoRoman Light", 15 * -1)
)

canvas.create_text(
    343.5,
    451.5,
    anchor="nw",
    text="\n\nZoom out",
    fill="#FFFFFF",
    font=("RobotoRoman Light", 15 * -1)
)

canvas.create_text(
    343.5,
    533.25,
    anchor="nw",
    text="\n\nZoom in",
    fill="#FFFFFF",
    font=("RobotoRoman Light", 15 * -1)
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    733.875,
    388.5,
    image=entry_image_1
)
camera_two = Entry(
    bd=0,
    bg="#F2F2F2",
    fg="#000716",
    highlightthickness=0,
    state="disabled"
)
camera_two.place(
    x=577.5,
    y=367.5,
    width=312.75,
    height=40.0
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=start_program,
    relief="flat"
)
button_1.place(
    x=571.5,
    y=451.5,
    width=324.75,
    height=63.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=hide_camera_two,
    relief="flat"
)
button_2.place(
    x=571.5,
    y=287.25,
    width=33.75,
    height=33.75
)

canvas.create_text(
    571.5,
    333.75,
    anchor="nw",
    text="Cámara Secundaria",
    fill="#000000",
    font=("RobotoRoman Medium", 18 * -1)
)

canvas.create_text(
    614.25,
    293.25,
    anchor="nw",
    text="Cámara Estéreo",
    fill="#000000",
    font=("RobotoRoman Medium", 18 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    733.875,
    232.5,
    image=entry_image_2
)
camera_one = Entry(
    bd=0,
    bg="#F2F2F2",
    fg="#000716",
    highlightthickness=0
)
camera_one.place(
    x=577.5,
    y=211.5,
    width=312.75,
    height=40.0
)

canvas.create_text(
    571.5,
    177.75,
    anchor="nw",
    text="Cámara Principal",
    fill="#000000",
    font=("RobotoRoman Medium", 18 * -1)
)

canvas.create_text(
    571.5,
    673.5,
    anchor="nw",
    text="* Para saber más sobre cómo calibrar el sistema buscar\nen el archivo con nombre: Instrucciones_calibracion.txt",
    fill="#000000",
    font=("RobotoRoman Light", 12 * -1)
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=calibrate,
    relief="flat"
)
button_3.place(
    x=571.5,
    y=625.5,
    width=164.25,
    height=39.0
)
window.resizable(False, False)
window.mainloop()
